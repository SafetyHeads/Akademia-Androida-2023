plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'io.gitlab.arturbosch.detekt'
    id 'androidx.navigation.safeargs.kotlin'
}

android {
    namespace 'com.safetyheads.akademiaandroida'
    compileSdk 33

    flavorDimensions += "version"
    productFlavors {
        development {
            dimension = "version"
            applicationIdSuffix = ".development"
        }
        qa {
            dimension = "version"
            applicationIdSuffix = ".qa"
        }
        production {
            dimension = "version"
            applicationIdSuffix = ".production"
        }
    }

    defaultConfig {
        applicationId "com.safetyheads.akademiaandroida"
        minSdk 24
        targetSdk 33
        def VERSION_NAME_MAJOR = 1
        def VERSION_NAME_MINOR = 0
        def VERSION_NAME_PATCH = 0
        def NAME_APPLICATION = "SafetyHeads"
        versionName = "$NAME_APPLICATION $VERSION_NAME_MAJOR.$VERSION_NAME_MINOR.$VERSION_NAME_PATCH"
        versionCode = generateVersionCode(VERSION_NAME_MAJOR, VERSION_NAME_MINOR, VERSION_NAME_PATCH)

        Properties properties = new Properties()
        File localPropertiesFile = project.rootProject.file("local.properties")

        resValue "string", "MAPS_API_KEY", ""
        buildConfigField("String", "YOUTUBE_DATA_API_KEY", "\"\"")

        if (localPropertiesFile.exists()) {
            properties.load(localPropertiesFile.newDataInputStream())
            if (properties.contains('mapsApiKey')) {
                resValue "string", "MAPS_API_KEY", properties['mapsApiKey']
            }
            if (properties.contains('YOUTUBE_DATA_API_KEY')) {
                buildConfigField("String", "YOUTUBE_DATA_API_KEY", "\"${properties.getProperty("YOUTUBE_DATA_API_KEY")}\"")
            }

        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {

        }
        develop {
            initWith debug
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding = true
    }
}

dependencies {

    // Modules implementations
    implementation project(':domain')
    implementation project(':data')

    implementation 'com.jakewharton.threetenabp:threetenabp:1.4.6'

    implementation 'com.airbnb.android:lottie:6.0.0'
    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.5.3'
    implementation 'androidx.navigation:navigation-ui-ktx:2.5.3'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    implementation 'com.google.firebase:firebase-crashlytics-ktx:18.3.6'
    implementation 'com.google.firebase:firebase-analytics-ktx:21.2.2'
    implementation 'com.google.firebase:firebase-auth-ktx:21.3.0'
    implementation 'com.google.firebase:firebase-firestore-ktx:24.5.0'

    implementation 'com.google.android.gms:play-services-maps:18.1.0'

    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4'
    implementation 'com.google.firebase:firebase-config-ktx:21.3.0'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.10'
    //navigation component
    implementation 'androidx.navigation:navigation-ui-ktx:2.5.3'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.5.3'
    //MoccK library
    testImplementation "io.mockk:mockk:1.11.0"
    androidTestImplementation "io.mockk:mockk-android:1.12.0"
    testImplementation "org.assertj:assertj-core:3.20.2"


    // SplashScreen
    implementation 'androidx.core:core-splashscreen:1.0.0'

    //MoccK library
    testImplementation "io.mockk:mockk:1.12.0"
    androidTestImplementation "io.mockk:mockk-android:1.11.0"
    testImplementation "org.assertj:assertj-core:3.20.2"


    // Koin
    implementation('io.insert-koin:koin-android:3.3.2')

    implementation 'com.github.bumptech.glide:glide:4.15.1'

    // retrofit
    implementation('com.squareup.retrofit2:retrofit:2.9.0')
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.0'
    implementation "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:0.9.2"

    // GSON - retrofit
    implementation('com.squareup.retrofit2:converter-gson:2.9.0')

    // coroutine
    implementation('org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4')
    implementation('org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2')

}

private static Integer generateVersionCode(Integer VERSION_NAME_MAJOR, Integer VERSION_NAME_MINOR, Integer VERSION_NAME_PATCH) {
    Integer versionCode = VERSION_NAME_MAJOR * 10000 + VERSION_NAME_MINOR * 100 + VERSION_NAME_PATCH
    return versionCode
}